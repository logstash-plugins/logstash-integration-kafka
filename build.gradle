import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING
/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: "java"
apply plugin: 'maven-publish'
apply plugin: "distribution"
apply plugin: "idea"

group "org.logstash.integrations"

sourceCompatibility = JavaVersion.VERSION_1_8

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
    maven {
        // Confluent repo for kafka-avro-serializer
        url "https://packages.confluent.io/maven/"
    }
}

dependencies {
    implementation('io.confluent:kafka-avro-serializer:6.2.2') {
        exclude group: 'org.apache.kafka', module:'kafka-clients'
    }
    implementation('io.confluent:kafka-schema-serializer:6.2.2') {
        exclude group: 'org.apache.kafka', module:'kafka-clients'
    }
    implementation 'io.confluent:common-config:6.2.2'
    implementation 'org.apache.avro:avro:1.11.0'
    implementation('io.confluent:kafka-schema-registry-client:6.2.2') {
        exclude group: 'org.apache.kafka', module:'kafka-clients'
    }
    implementation('org.apache.kafka:kafka_2.12:2.8.1') {
        // contains kafka.utils.VerifiableProperties used by kafka-schema-registry-client, explicitly exclude
        // transitive dependencies
        transitive = false
    }
    implementation 'io.confluent:common-utils:6.2.2'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'org.glassfish.jersey.core:jersey-common:2.33'
    // given https://docs.confluent.io/current/installation/versions-interoperability.html matrix
    // Confluent Platform 6.2.x is Apache Kafka 2.8.x
    implementation 'org.apache.kafka:kafka-clients:2.8.1'
    implementation 'com.github.luben:zstd-jni:1.5.2-2'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.lz4:lz4-java:1.7.1'
    implementation 'org.xerial.snappy:snappy-java:1.1.8.4'
}
task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-integration-kafka_jars.rb')
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.runtimeClasspath.allDependencies.each {
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
        }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        configurations.runtimeClasspath.allDependencies.each { dep ->
            File f = configurations.runtimeClasspath.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
        }
    }
}

vendor.dependsOn(generateGemJarRequiresFile)
